% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stages.R
\name{rasterize}
\alias{rasterize}
\title{Rasterize a point cloud}
\usage{
rasterize(res, operators = "max", filter = "", ofile = temptif(), ...)
}
\arguments{
\item{res}{numeric. The resolution of the raster. Can be a vector with two resolutions.
In this case it does not correspond to the x and y resolution but to a buffered rasterization.
(see section 'Buffered' and examples)}

\item{operators}{Can be a character vector. "min", "max" and "count" are accepted as well
as many others (see section 'Operators'). Can also rasterize a triangulation if the input is a
LASRalgorithm for triangulation (see examples). Can also be a user-defined expression
(see example and section 'Operators').}

\item{filter}{the 'filter' argument allows filtering of the point-cloud to work with points of
interest. The available filters are those from LASlib and can be found by running \link{filter_usage}.
For a given stage when a filter is applied, only the points that meet the criteria are processed.
The most common strings are "-keep_first", "-keep_class 2", "drop_z_below 2". For more details see
\link{filters}.}

\item{ofile}{character. Full outputs are always stored on disk. If \code{ofile = ""}
then the stage will not store the result on disk and will return nothing. It will however
hold partial output results temporarily in memory. This is useful for stage that are only
intermediate stage.}

\item{...}{\code{default_value} numeric. When rasterizing with an operator and a filter (e.g. \verb{-keep_z_above 2})
some pixels that are covered by points may no longer contain any point that pass the filter criteria
and are assigned NA. To differentiate NAs from non covered pixels and NAs from covered pixels without point that
pass the filter, the later case can be assigned another value such as 0.}
}
\value{
This stage produces a raster. The path provided to `ofile` is expected to be `.tif` or any
other format supported by GDAL.
}
\description{
Rasterize a point cloud using different approaches. This stage does not modify the point cloud.
It produces a derived product in raster format.
}
\section{Operators}{

If \code{operators} is a string or a vector of strings, each string is composed of two parts separated by an
underscore. The first part is the attribute on which the metric must be computed (e.g., z, intensity, classification).
The second part is the name of the metric (e.g., mean, sd, cv). A string thus typically looks like
\code{"z_max"}, \code{"intensity_min"}, \code{"z_mean"}, \code{"classification_mode"}.\cr\cr
The available attributes are accessible via a single letter or via their lowercase name: t - gpstime,
a - angle, i - intensity, n - numberofreturns, r - returnnumber, c - classification,
s - synthetic, k - keypoint, w - withheld, o - overlap (format 6+), u - userdata, p - pointsourceid,
e - edgeofflightline, d - scandirectionflag, R - red, G - green, B - blue, N - nir.\cr\cr
The available metric names are: count, max, min, mean, median, sum, sd, cv, pX (percentile), aboveX, and mode.
Some metrics have an attribute + name + a parameter X, such as "pX" where "X" can be substituted by a number.
Here, \code{z_pX} represents the Xth percentile; for instance, \code{z_p95} signifies the 95th
percentile of z. \code{z_aboveX} corresponds to the percentage of points above X (sometimes called canopy cover).\cr\cr
It is possible to call a metric without the name of the attribute. In this case, z is the default.
Below are some examples of valid calls:

\if{html}{\out{<div class="sourceCode">}}\preformatted{rasterize(10, c("max", "count", "i_mean", "z_p95"))
rasterize(10, c("z_max", "c_count", "intensity_mean", "p95"))
}\if{html}{\out{</div>}}

\strong{Be careful}: the engine supports any combination of \code{attribute_metric} strings. While they are
all computable, they are not all meaningful. For example, \code{c_mode} makes sense but not \code{z_mode}. Also,
all metrics are computed with 32-bit floating point accuracy, so \code{x_mean} or \code{y_sum} might be
slightly inaccurate, but anyway, these metrics are not supposed to be useful.
\cr\cr
If \code{operators} is an R user-defined expression, the function should return either a vector of numbers
or a \code{list} containing atomic numbers. To assign a band name to the raster, the vector or the \code{list}
must be named accordingly. The following are valid operators:

\if{html}{\out{<div class="sourceCode">}}\preformatted{f = function(x) \{ return(mean(x)) \}
g = function(x,y) \{ return(c(avg = mean(x), med = median(y))) \}
h = function(x) \{ return(list(a = mean(x), b = median(x))) \}
rasterize(10, f(Intensity))
rasterize(10, g(Z, Intensity))
rasterize(10, h(Z))
}\if{html}{\out{</div>}}
}

\section{Buffered}{

If the argument \code{res} is a vector with two numbers, the first number represents the resolution of
the output raster, and the second number represents the size of the windows used to compute the
metrics. This approach is called Buffered Area Based Approach (BABA).\cr
In classical rasterization, the metrics are computed independently for each pixel. For example,
predicting a resource typically involves computing metrics with a 400 square meter pixel, resulting
in a raster with a resolution of 20 meters. It is not possible to achieve a finer granularity with
this method.\cr
However, with buffered rasterization, it is possible to compute the raster at a resolution of 10
meters (i.e., computing metrics every 10 meters) while using 20 x 20 windows for metric computation.
In this case, the windows overlap, essentially creating a moving window effect.\cr
This option does not apply when rasterizing a triangulation, and the second value is not considered
in this case.
}

\examples{
f <- system.file("extdata", "Topography.las", package="lasR")
read <- reader_las()
tri  <- triangulate(filter = keep_ground())
dtm  <- rasterize(1, tri) # input is a triangulation stage
avgi <- rasterize(10, mean(Intensity)) # input is a user expression
chm  <- rasterize(2, "max") # input is a character vector
pipeline <- read + tri + dtm + avgi + chm
ans <- exec(pipeline, on = f)
ans[[1]]
ans[[2]]
ans[[3]]

# Demonstration of buffered rasterization

# A good resolution for computing point density is 5 meters.
c0 <- rasterize(5, "count")

# Computing point density at too fine a resolution doesn't make sense since there is
# either zero or one point per pixel. Therefore, producing a point density raster with
# a 2 m resolution is not feasible with classical rasterization.
c1 <- rasterize(2, "count")

# Using a buffered approach, we can produce a raster with a 2-meter resolution where
# the metrics for each pixel are computed using a 5-meter window.
c2  <- rasterize(c(2,5), "count")

pipeline = read + c0 + c1 + c2
res <- exec(pipeline, on = f)
terra::plot(res[[1]]/25)  # divide by 25 to get the density
terra::plot(res[[2]]/4)   # divide by 4 to get the density
terra::plot(res[[3]]/25)  # divide by 25 to get the density
}
