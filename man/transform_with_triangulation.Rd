% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/algorithm.R
\name{transform_with_triangulation}
\alias{transform_with_triangulation}
\title{Transform a point cloud using a triangulation}
\usage{
transform_with_triangulation(
  triangulator,
  operator = "-",
  store_in_attribute = ""
)
}
\arguments{
\item{triangulator}{LASRpipeline. A 'triangulate' algorithm.}

\item{operator}{string. '-' and '+' are supported.}

\item{store_in_attribute}{numeric. Use an extra bytes attribute to store the result.}
}
\description{
This algorithm uses a Delaunay triangulation and, for each point, it linearly interpolates the
triangulation to retrieve the value of the mesh at the exact location of the point. Then it
performs an operation with this value to modify the point cloud. This can typically be used
to build a normalization algorithm. This algorithm modifies the point cloud in the pipeline but
does not produce any output.
}
\examples{
f <- system.file("extdata", "Topography.las", package="lasR")

# There is no normalize algorithm in lasR. Let's create one
normalize = function() {
  mesh  <- triangulate(filter = "-keep_class 2")
  norm <- mesh + transform_with_triangulation(mesh)
  return(norm)
 }

pipeline <- reader(f) + normalize() + write_las()
ans <- processor(pipeline)

}
\seealso{
\link{reader}
\link{triangulate}
\link{write_las}
}
